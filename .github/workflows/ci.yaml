name: CI

on: [push, pull_request]

jobs:
  lint_and_build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: stable - ${{ matrix.os }} - node@12
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Set platform name
        run: |
          export NODE_PLATFORM_NAME=$(node -e "console.log(require('os').platform())")
          echo "::set-env name=PLATFORM_NAME::$NODE_PLATFORM_NAME"
        shell: bash

      - name: Install llvm
        if: matrix.os == 'windows-latest'
        run: choco install -y llvm

      - name: Set llvm path
        if: matrix.os == 'windows-latest'
        uses: allenevans/set-env@v1.0.0
        with:
          LIBCLANG_PATH: 'C:\Program Files\LLVM\bin'

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-${{ matrix.os }}-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-${{ matrix.os }}gnu-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: stable-${{ matrix.os }}gnu-cargo-build-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-${{ matrix.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            npm-cache-

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org

      - name: 'Lint'
        run: yarn lint
        if: matrix.os == 'ubuntu-latest'

      - name: typecheck
        run: yarn typecheck
        if: matrix.os == 'ubuntu-latest'

      - name: Run build
        run: npx lerna run build --stream -- --platform

      - name: Upload crc32 artifact
        uses: actions/upload-artifact@v1
        with:
          name: crc32.${{ env.PLATFORM_NAME }}.node
          path: packages/crc32/crc32.${{ env.PLATFORM_NAME }}.node

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache

  test_binding:
    name: Test bindings on ${{ matrix.os }} - node@${{ matrix.node }}
    needs: lint_and_build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: ['10', '12', '14']
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Set platform name
        run: |
          export NODE_PLATFORM_NAME=$(node -e "console.log(require('os').platform())")
          echo "::set-env name=PLATFORM_NAME::$NODE_PLATFORM_NAME"
        shell: bash

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-${{ matrix.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            npm-cache-

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org

      - name: Download crc32 artifact
        uses: actions/download-artifact@v1
        with:
          name: crc32.${{ env.PLATFORM_NAME }}.node
          path: packages/crc32

      - name: Test bindings
        run: yarn test
