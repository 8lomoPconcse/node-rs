name: CI

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint_and_build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: stable - ${{ matrix.os }} - node@12
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Set platform name
        run: |
          export NODE_PLATFORM_NAME=$(node -e "console.log(require('os').platform())")
          echo "::set-env name=PLATFORM_NAME::$NODE_PLATFORM_NAME"
        shell: bash

      - name: Install llvm
        if: matrix.os == 'windows-latest'
        run: choco install -y llvm

      - name: Set llvm path
        if: matrix.os == 'windows-latest'
        uses: allenevans/set-env@v1.0.0
        with:
          LIBCLANG_PATH: 'C:\Program Files\LLVM\bin'

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-${{ matrix.os }}-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-${{ matrix.os }}gnu-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-${{ matrix.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            npm-cache-

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org

      - name: 'Lint'
        run: yarn lint
        if: matrix.os == 'ubuntu-latest'

      - name: typecheck
        run: yarn typecheck
        if: matrix.os == 'ubuntu-latest'

      - name: Run build
        run: |
          cargo build --release
          npx lerna run build --stream -- --platform

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ env.PLATFORM_NAME }}
          path: packages/*/*.${{ env.PLATFORM_NAME }}.node

  test_binding:
    name: Test bindings on ${{ matrix.os }} - node@${{ matrix.node }}
    needs: lint_and_build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: ['10', '12', '13', '14']
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Set platform name
        run: |
          export NODE_PLATFORM_NAME=$(node -e "console.log(require('os').platform())")
          echo "::set-env name=PLATFORM_NAME::$NODE_PLATFORM_NAME"
        shell: bash

      # Do not cache node_modules, or yarn workspace links broken
      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-${{ env.PLATFORM_NAME }}
          path: artifacts

      - name: Move artifacts
        run: node scripts/mv-artifacts.js
        shell: bash

      - name: Test bindings
        run: yarn test

      - name: Build TypeScript
        run: yarn build:ts

      - name: List packages
        run: ls -R packages
        shell: bash

      - name: Run benchmark
        run: yarn bench

  publish:
    name: Publish
    if: "startsWith(github.event.head_commit.message, 'chore(release): publish')"
    runs-on: ubuntu-latest
    needs: test_binding

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-cache-ubuntu-latest-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            npm-cache-

      - name: 'Install dependencies'
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: Move artifacts
        run: node scripts/mv-artifacts.js
        env:
          MOVE_TARGET: all

      - name: Build TypeScript
        run: yarn build:ts

      - name: List packages
        run: ls -R packages
        shell: bash
      - name: Lerna publish
        run: |
          find ./packages/ -type d -maxdepth 1 -exec cp LICENSE {} \;
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npx lerna publish from-package --no-verify-access --yes
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
